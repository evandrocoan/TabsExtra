{
    "docs": [
        {
            "location": "/", 
            "text": "TabsExtra\n\n\nTab context menu enhancements for Sublime Text.\n\n\n\n\nOverview\n\n\nSublime Plugin with sticky tabs, more tab closing options, tab sorting, and tab access to cloning, deleting, renaming etc.  ST3 is the only supported platform.\n\n\n\n\nFeatures\n\n\n\n\nAdds \nClose Tabs to the Left\n for the current group\n\n\nAdds \nClose All Tabs\n for the current group\n\n\nAdds \nSticky Tabs\n that allows a user select certain tabs that will not close when a tab close command is issued.\n\n\nAdds variants of the close commands to skip unsaved files, or to dismiss saved files with no prompt\n\n\nOverrides the built-in tab commands and \nclose\n and \nclose_all\n commands to work with sticky tabs (ST3 only)\n\n\nKeep active window focus on delete, or default to the last active, left, or right tab (user configurable)\n\n\nAdd open last tab, reveal in sidebar or finder, copy file path, save options, and revert\n\n\nAdds tab sorting options (based loosely on @bizoo\ns \nSortTabs\n plugin)\n\n\nAccess clone, delete, rename, save, reveal, copy file path, revert, etc.\n\n\n\n\nST2 Support?\n\n\nSorry, there are no plans for ST2 support.", 
            "title": "Home"
        }, 
        {
            "location": "/#tabsextra", 
            "text": "Tab context menu enhancements for Sublime Text.", 
            "title": "TabsExtra"
        }, 
        {
            "location": "/#overview", 
            "text": "Sublime Plugin with sticky tabs, more tab closing options, tab sorting, and tab access to cloning, deleting, renaming etc.  ST3 is the only supported platform.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Adds  Close Tabs to the Left  for the current group  Adds  Close All Tabs  for the current group  Adds  Sticky Tabs  that allows a user select certain tabs that will not close when a tab close command is issued.  Adds variants of the close commands to skip unsaved files, or to dismiss saved files with no prompt  Overrides the built-in tab commands and  close  and  close_all  commands to work with sticky tabs (ST3 only)  Keep active window focus on delete, or default to the last active, left, or right tab (user configurable)  Add open last tab, reveal in sidebar or finder, copy file path, save options, and revert  Adds tab sorting options (based loosely on @bizoo s  SortTabs  plugin)  Access clone, delete, rename, save, reveal, copy file path, revert, etc.", 
            "title": "Features"
        }, 
        {
            "location": "/#st2-support", 
            "text": "Sorry, there are no plans for ST2 support.", 
            "title": "ST2 Support?"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of TabsExtra.\n\n\n\n\nGeneral Usage\n\n\nUsing TabsExtra is very straight forward once the menu is created.  TabsExtra will update the right click context menu of tabs with various useful features.  It also has a couple of Sublime\ns commands to allow for various improvements in relation to tab focus when closing files, tab position when opening files, and making available new useful close commands.\n\n\nInstall/Upgrade Menu\n\n\nWhen first installing TabsExtra, you need to Install the new menu; this does not happen automatically.  Go to \nPreferences-\nPackage Settings-\nTabsExtra\n and Install/Upgrade either the \nbasic\n tab menu or the \noverride\n menu. The \nbasic\n menu\ns commands won\nt be grouped together with the built-in options because of the way Sublime Text\ns menus are managed.  But the \noverride\n menu overrides the \nDefault\n Package\ns tab context menu for sane, clean grouping of the commands.\n\n\nWhich Commands does TabsExtra Override?\n\n\nTabsExtra does \nnot\n override \nclose_file\n, but it does override the following:\n\n\n\n\nclose_by_index\n: close view from tab\n\n\nclose\n: close active view from global menu\n\n\nclose_all\n: close all tabs in all groups\n\n\nclose_others_by_index\n: close other tabs in current group\n\n\nclose_to_right_by_index\n close tabs to right in current group\n\n\n\n\nWhat TabsExtra Cannot Do\n\n\nTabsExtra \ncannot\n override the tab close button.  But it should be able to predict when it is pressed, and focus the appropriate window after the close.\n\n\nSticky Tab Settings\n\n\nBy default, after any \nClose\n command is run, all \nSticky\n tab properties are forgotten.  You can make a tab\ns \nStickiness\n persist by enabling the following setting:\n\n\n    \npersistent_sticky\n:\n \nfalse\n,\n\n\n\n\n\n\nTab Focus After Close\n\n\nBy default TabsExtra keeps the current active tab focused, but if the active tab gets deleted, TabsExtra will default to either the left, right, or last active tab (depending how the user has it set).\n\n\n    \n// If active window gets closed, default to (left|right|last_active)\n\n    \nfallback_focus\n:\n \nright\n\n\n\n\n\n\nTab Spawn Position\n\n\nTabsExtra can control where a new window is opened with the \nspawn_view\n settings option.\n\n\n    \n// Experimental: When opening a view, where should it be spawned at (none|left|active_left|active_right|right)\n\n    \nspawn_view\n:\n \nnone\n,\n\n\n\n\n\n\nTab Sort\n\n\nTabsExtra adds various sort options to the tab context menu.  You can control which sort options appear and even configure a specific sort command to run when a file is saved in the settings file.  You can also adjust how numbers in strings are sorted.\n\n\n    \n// Define sort layout.  Each entry contains:\n\n    \n//    \nmodule\n: plugin that defines what view meta data is used to sort\n\n    \n//    \ncaption\n: menu name for entry\n\n    \n//    \nreverse\n: (optional) sort tabs in the reverse (true|false)\n\n    \nsort_layout\n:\n \n[\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.name\n,\n \ncaption\n:\n \nName\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.path\n,\n \ncaption\n:\n \nPath\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.modified\n,\n \ncaption\n:\n \nModified\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.created\n,\n \ncaption\n:\n \nCreated\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.type\n,\n \ncaption\n:\n \nExtension\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.size\n,\n \ncaption\n:\n \nSize\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.activated\n,\n \ncaption\n:\n \nLast Activated\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.syntax\n,\n \ncaption\n:\n \nSyntax\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.reverse\n,\n \ncaption\n:\n \nReverse Order\n}\n\n    \n],\n\n    \n// When sorting, normal strings will be sorted numerically.\n\n    \n//\n\n    \n// Example (non-numerical sort):\n\n    \n//   test12 test2 test1 =\n test1 test12 test2\n\n    \n//\n\n    \n// Example (numerical sort):\n\n    \n//   test12 test2 test1 =\n test1 test2 test12\n\n    \nnumeric_sort\n:\n \nfalse\n,\n\n\n    \n// Sort tabs when a file is opened or saved\n\n    \nsort_on_load_save\n:\n \nfalse\n,\n\n\n    \n// Sort module to use when sorting on load and save\n\n    \n//    \nmodule\n: plugin that defines what view meta data is used to sort\n\n    \n//    \nreverse\n: (optional) sort tabs in the reverse (true|false)\n\n    \nsort_on_load_save_command\n:\n \n{\nmodule\n:\n \nTabsExtra.sort.name\n}\n\n\n\n\n\n\nSort options are actually provided by small sort modules.  As seen above, sort modules are specified in the settings file like you are importing a python module.  The package folder would be the root of the module and would then be followed by the sub-folders and the actual module name; all would be separated with dots.  As shown above, TabsExtra comes with 9 different sort modules: name, path, modified, created, type, size, activated, syntax, reverse.  If these modules do not suit your needs, you can right your own.\n\n\nWithin a sort module, there must be a run method as shown above below:\n\n\n\n\ndef run(views, view_data)\n\n\n\n\nThis function takes a list of \nviews\n and an empty list to append sort data to.  The \nview_data\n is populated by the \nrun\n function with arrays of formatted info that will be used to sort the tabs.  Info with the most importance should be appended first.\n\n\nIf you are dealing with strings that have numbers, and you wish to sort them numerically, you can import the numeric helper with the following import: \nfrom\n \nTabsExtra\n \nimport\n \ntab_sort_helper\n \nas\n \ntsh\n.  Once imported you can simply run your data through the \ntab_sort_helper\n: \ntsh\n.\nnumeric_sort\n(\ndirname\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n)\n.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nviews\n\n\nList of Sublime view objects.\n\n\n\n\n\n\nview_data\n\n\nAn empty list that should be populated by the function with relevant sort data.\n\n\n\n\n\n\n\n\nExample module:\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n,\n \nbasename\n\n\nfrom\n \nTabsExtra\n \nimport\n \ntab_sort_helper\n \nas\n \ntsh\n\n\n\n\ndef\n \nrun\n(\nviews\n,\n \nview_data\n):\n\n    \nfor\n \nv\n \nin\n \nviews\n:\n\n        \nview_data\n.\nappend\n(\n\n            \n(\n\n                \ntsh\n.\nnumeric_sort\n(\ndirname\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n)\n.\nlower\n()),\n\n                \ntsh\n.\nnumeric_sort\n(\nbasename\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n)\n.\nlower\n()),\n\n                \nv\n\n            \n)\n\n        \n)\n\n\n\n\n\n\n\n\n\n\nAdditional Menu Helper Commands\n\n\nTabsExtra also adds a number of other miscellaneous useful tab context commands that can open recently tabs, delete tabs from the disk, rename the current file, reveal the the tab\ns file in the sidebar or file manager, retrieve the file path, and revert unsaved changes.\n\n\nCustomize Tab Context Menu\n\n\nThe tab menu adds a number of times.  Each item group can be re-ordered, or excluded if desired via the settings file.\n\n\n    \n// Menu layout include or exclude, in whatever order you desire, the following options:\n\n    \n// [\nclose\n, \nsticky\n, \nopen\n, \nclone\n, \nsave\n, \ndelete\n, \nrename\n, \nreveal\n, \npath\n, \nrevert\n, \nsort\n]\n\n    \n// When done, go to Preferences-\nPackage Settings-\nTabsExtra and Install/Upgrade either\n\n    \n// the default TabsMenu or the Override Menu which overrides the \nDefault\n package\ns menu.\n\n    \nmenu_layout\n:\n \n[\nclose\n,\n \nsticky\n,\n \nopen\n,\n \nclone\n,\n \nsave\n,\n \ndelete\n,\n \nrename\n,\n \nreveal\n,\n \npath\n,\n \nrevert\n,\n \nsort\n],", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of TabsExtra.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#general-usage", 
            "text": "Using TabsExtra is very straight forward once the menu is created.  TabsExtra will update the right click context menu of tabs with various useful features.  It also has a couple of Sublime s commands to allow for various improvements in relation to tab focus when closing files, tab position when opening files, and making available new useful close commands.", 
            "title": "General Usage"
        }, 
        {
            "location": "/usage/#installupgrade-menu", 
            "text": "When first installing TabsExtra, you need to Install the new menu; this does not happen automatically.  Go to  Preferences- Package Settings- TabsExtra  and Install/Upgrade either the  basic  tab menu or the  override  menu. The  basic  menu s commands won t be grouped together with the built-in options because of the way Sublime Text s menus are managed.  But the  override  menu overrides the  Default  Package s tab context menu for sane, clean grouping of the commands.", 
            "title": "Install/Upgrade Menu"
        }, 
        {
            "location": "/usage/#which-commands-does-tabsextra-override", 
            "text": "TabsExtra does  not  override  close_file , but it does override the following:   close_by_index : close view from tab  close : close active view from global menu  close_all : close all tabs in all groups  close_others_by_index : close other tabs in current group  close_to_right_by_index  close tabs to right in current group", 
            "title": "Which Commands does TabsExtra Override?"
        }, 
        {
            "location": "/usage/#what-tabsextra-cannot-do", 
            "text": "TabsExtra  cannot  override the tab close button.  But it should be able to predict when it is pressed, and focus the appropriate window after the close.", 
            "title": "What TabsExtra Cannot Do"
        }, 
        {
            "location": "/usage/#sticky-tab-settings", 
            "text": "By default, after any  Close  command is run, all  Sticky  tab properties are forgotten.  You can make a tab s  Stickiness  persist by enabling the following setting:       persistent_sticky :   false ,", 
            "title": "Sticky Tab Settings"
        }, 
        {
            "location": "/usage/#tab-focus-after-close", 
            "text": "By default TabsExtra keeps the current active tab focused, but if the active tab gets deleted, TabsExtra will default to either the left, right, or last active tab (depending how the user has it set).       // If active window gets closed, default to (left|right|last_active) \n     fallback_focus :   right", 
            "title": "Tab Focus After Close"
        }, 
        {
            "location": "/usage/#tab-spawn-position", 
            "text": "TabsExtra can control where a new window is opened with the  spawn_view  settings option.       // Experimental: When opening a view, where should it be spawned at (none|left|active_left|active_right|right) \n     spawn_view :   none ,", 
            "title": "Tab Spawn Position"
        }, 
        {
            "location": "/usage/#tab-sort", 
            "text": "TabsExtra adds various sort options to the tab context menu.  You can control which sort options appear and even configure a specific sort command to run when a file is saved in the settings file.  You can also adjust how numbers in strings are sorted.       // Define sort layout.  Each entry contains: \n     //     module : plugin that defines what view meta data is used to sort \n     //     caption : menu name for entry \n     //     reverse : (optional) sort tabs in the reverse (true|false) \n     sort_layout :   [ \n         { module :   TabsExtra.sort.name ,   caption :   Name }, \n         { module :   TabsExtra.sort.path ,   caption :   Path }, \n         { module :   TabsExtra.sort.modified ,   caption :   Modified }, \n         { module :   TabsExtra.sort.created ,   caption :   Created }, \n         { module :   TabsExtra.sort.type ,   caption :   Extension }, \n         { module :   TabsExtra.sort.size ,   caption :   Size }, \n         { module :   TabsExtra.sort.activated ,   caption :   Last Activated }, \n         { module :   TabsExtra.sort.syntax ,   caption :   Syntax }, \n         { module :   TabsExtra.sort.reverse ,   caption :   Reverse Order } \n     ], \n     // When sorting, normal strings will be sorted numerically. \n     // \n     // Example (non-numerical sort): \n     //   test12 test2 test1 =  test1 test12 test2 \n     // \n     // Example (numerical sort): \n     //   test12 test2 test1 =  test1 test2 test12 \n     numeric_sort :   false , \n\n     // Sort tabs when a file is opened or saved \n     sort_on_load_save :   false , \n\n     // Sort module to use when sorting on load and save \n     //     module : plugin that defines what view meta data is used to sort \n     //     reverse : (optional) sort tabs in the reverse (true|false) \n     sort_on_load_save_command :   { module :   TabsExtra.sort.name }   Sort options are actually provided by small sort modules.  As seen above, sort modules are specified in the settings file like you are importing a python module.  The package folder would be the root of the module and would then be followed by the sub-folders and the actual module name; all would be separated with dots.  As shown above, TabsExtra comes with 9 different sort modules: name, path, modified, created, type, size, activated, syntax, reverse.  If these modules do not suit your needs, you can right your own.  Within a sort module, there must be a run method as shown above below:   def run(views, view_data)   This function takes a list of  views  and an empty list to append sort data to.  The  view_data  is populated by the  run  function with arrays of formatted info that will be used to sort the tabs.  Info with the most importance should be appended first.  If you are dealing with strings that have numbers, and you wish to sort them numerically, you can import the numeric helper with the following import:  from   TabsExtra   import   tab_sort_helper   as   tsh .  Once imported you can simply run your data through the  tab_sort_helper :  tsh . numeric_sort ( dirname ( v . file_name ()   if   v . file_name ()   else   ) .  Parameters :     Parameter  Description      views  List of Sublime view objects.    view_data  An empty list that should be populated by the function with relevant sort data.     Example module:  from   os.path   import   dirname ,   basename  from   TabsExtra   import   tab_sort_helper   as   tsh  def   run ( views ,   view_data ): \n     for   v   in   views : \n         view_data . append ( \n             ( \n                 tsh . numeric_sort ( dirname ( v . file_name ()   if   v . file_name ()   else   ) . lower ()), \n                 tsh . numeric_sort ( basename ( v . file_name ()   if   v . file_name ()   else   ) . lower ()), \n                 v \n             ) \n         )", 
            "title": "Tab Sort"
        }, 
        {
            "location": "/usage/#additional-menu-helper-commands", 
            "text": "TabsExtra also adds a number of other miscellaneous useful tab context commands that can open recently tabs, delete tabs from the disk, rename the current file, reveal the the tab s file in the sidebar or file manager, retrieve the file path, and revert unsaved changes.", 
            "title": "Additional Menu Helper Commands"
        }, 
        {
            "location": "/usage/#customize-tab-context-menu", 
            "text": "The tab menu adds a number of times.  Each item group can be re-ordered, or excluded if desired via the settings file.       // Menu layout include or exclude, in whatever order you desire, the following options: \n     // [ close ,  sticky ,  open ,  clone ,  save ,  delete ,  rename ,  reveal ,  path ,  revert ,  sort ] \n     // When done, go to Preferences- Package Settings- TabsExtra and Install/Upgrade either \n     // the default TabsMenu or the Override Menu which overrides the  Default  package s menu. \n     menu_layout :   [ close ,   sticky ,   open ,   clone ,   save ,   delete ,   rename ,   reveal ,   path ,   revert ,   sort ],", 
            "title": "Customize Tab Context Menu"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nTabsExtra is released under the MIT license.\n\n\nCopyright \n 2014 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "TabsExtra is released under the MIT license.  Copyright   2014 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}