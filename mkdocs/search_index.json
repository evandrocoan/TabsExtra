{
    "docs": [
        {
            "location": "/", 
            "text": "TabsExtra\n\n\nTab context menu enhancements for Sublime Text.\n\n\n\n\nOverview\n\n\nSublime Plugin with sticky tabs, more tab closing options, tab sorting, and tab access to cloning, deleting, renaming etc.\n\n\n\n\nFeatures\n\n\n\n\nAdds \nClose Tabs to the Left\n for the current group.\n\n\nAdds \nClose All Tabs\n for the current group.\n\n\nAdds \nSticky Tabs\n that allows a user select certain tabs that will not close when a tab close command is issued.\n\n\nAdds variants of the close commands to skip unsaved files, or to dismiss saved files with no prompt.\n\n\nOverrides the built-in tab commands and \nclose\n and \nclose_all\n commands to work with sticky tabs.\n\n\nKeep active window focus on delete, or default to the last active, left, or right tab (user configurable).\n\n\nAdd open last tab, reveal in sidebar or finder, copy file path, save options, and revert.\n\n\nAdds tab sorting options (based loosely on @bizoo\ns \nSortTabs\n plugin).\n\n\nAccess clone, delete, rename, move, save, reveal, copy file path, revert, etc.\n\n\n\n\nST2 Support?\n\n\nSorry, there are no plans for ST2 support.", 
            "title": "About TabsExtra"
        }, 
        {
            "location": "/#tabsextra", 
            "text": "Tab context menu enhancements for Sublime Text.", 
            "title": "TabsExtra"
        }, 
        {
            "location": "/#overview", 
            "text": "Sublime Plugin with sticky tabs, more tab closing options, tab sorting, and tab access to cloning, deleting, renaming etc.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Adds  Close Tabs to the Left  for the current group.  Adds  Close All Tabs  for the current group.  Adds  Sticky Tabs  that allows a user select certain tabs that will not close when a tab close command is issued.  Adds variants of the close commands to skip unsaved files, or to dismiss saved files with no prompt.  Overrides the built-in tab commands and  close  and  close_all  commands to work with sticky tabs.  Keep active window focus on delete, or default to the last active, left, or right tab (user configurable).  Add open last tab, reveal in sidebar or finder, copy file path, save options, and revert.  Adds tab sorting options (based loosely on @bizoo s  SortTabs  plugin).  Access clone, delete, rename, move, save, reveal, copy file path, revert, etc.", 
            "title": "Features"
        }, 
        {
            "location": "/#st2-support", 
            "text": "Sorry, there are no plans for ST2 support.", 
            "title": "ST2 Support?"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling TabsExtra.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install TabsExtra is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nTabsExtra\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install TabsExtra for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/TabsExtra.git TabsExtra\n\n\n\n\n\n\n\n\n\nRestart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing TabsExtra.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install TabsExtra is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  TabsExtra ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install TabsExtra for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/TabsExtra.git TabsExtra    Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of TabsExtra.\n\n\n\n\nGeneral Usage\n\n\nUsing TabsExtra is very straight forward once the menu is created.  TabsExtra will update the right click context menu of tabs with various useful features.  It also overrides a couple of Sublime\ns commands to allow for various improvements in relation to tab closing, tab focus when closing files, and tab position when opening files.\n\n\nInstall/Upgrade Menu\n\n\nWhen first installing TabsExtra, you need to Install the new menu; this does not happen automatically.  Go to \nPreferences-\nPackage Settings-\nTabsExtra\n and Install/Upgrade either the \nbasic\n tab menu or the \noverride\n menu. The \nbasic\n menu\ns commands won\nt be grouped together with the built-in options because of the way Sublime Text\ns menus are managed.  But the \noverride\n menu overrides the \nDefault\n Package\ns tab context menu for sane, clean grouping of the commands.\n\n\nWhich Commands does TabsExtra Override and Why?\n\n\nTabsExtra does \nnot\n override \nclose_file\n, but it does override the following to enhance tab closing behavior:\n\n\n\n\nclose_by_index\n: close view from tab\n\n\nclose\n: close active view from global menu\n\n\nclose_all\n: close all tabs in all groups\n\n\nclose_others_by_index\n: close other tabs in current group\n\n\nclose_to_right_by_index\n close tabs to right in current group\n\n\n\n\nThis allows TabsExtra do special things like ignore certain tabs, focus a specific tab after closing tab(s), force close without prompting the user if they want to save for every unsaved tab, or even skip unsaved tabs when closing.\n\n\nTabsExtra \ncannot\n override the tab close button.  But it should be able to predict when it is pressed, and focus the appropriate window after the close.\n\n\nNew Close Options\n\n\nTabsExtra expands how many close options there are in the tab context menu.  It also makes them available in the quick panel as well.\n\n\n\n\nClose.\n\n\nClose other tabs.\n\n\nClose tabs to left.\n\n\nClose tabs to right.\n\n\nClose all tabs.\n\n\n\n\nAnd TabsExtra also provides variants that will force close unsaved tabs without annoying the user with a prompt for every unsaved tab.  It also provides variants to simply skip unsaved tabs.\n\n\nSticky Tabs\n\n\nTabsExtra allows users to make a tab \nsticky\n.  This allows the tab to not close when a bulk \nclose\n operation is performed.  By default, after any \nclose\n command is run, the \nsticky\n tab properties are forgotten.  You can make a tab\ns stickiness persist by enabling \npersistent_sticky\n.\n\n\n    \n// By default TabsExtra forgets a tab\ns \nstickiness\n when\n\n    \n// any \ntab close\n command is issued.  You can make the tab\ns\n\n    \n// \nStickiness\n persist by enabling the following feature.\n\n    \npersistent_sticky\n:\n \nfalse\n,\n\n\n\n\n\n\nA tab\ns stickiness can be controlled either the context menu or the quick panel.\n\n\nTab Focus After Close\n\n\nBy default TabsExtra keeps the current active tab focused, but if the active tab gets deleted, TabsExtra will default to either the left, right, or last active tab (depending how the user has it set).\n\n\n    \n// If active window gets closed, default to (left|right|last_active)\n\n    \nfallback_focus\n:\n \nright\n\n\n\n\n\n\nTab Spawn Position\n\n\nTabsExtra can control where a new window is opened with the \nspawn_view\n settings option.\n\n\n    \n// Experimental: When opening a view, where should it be spawned at (none|left|active_left|active_right|right)\n\n    \nspawn_view\n:\n \nnone\n,\n\n\n\n\n\n\nTab Sort\n\n\nTabsExtra adds various sort options to the tab context menu and quick panel.\n\n\n\n\nSort by name.\n\n\nSort by path.\n\n\nSort by modified.\n\n\nSort by created.\n\n\nSort by file extension.\n\n\nSort by size.\n\n\nSort by last activated.\n\n\nSort by syntax.\n\n\nSort current order in reverse.\n\n\n\n\nYou can control how numbers are handled in strings by enabling \nnumeric_sort\n.  Numbers in strings are sorted alphabetically by default, but you can cause the strings to be sorted numerically if needed.\n\n\n    \n// When sorting, normal strings will be sorted numerically.\n\n    \n//\n\n    \n// Example (non-numerical sort):\n\n    \n//   test12 test2 test1 =\n test1 test12 test2\n\n    \n//\n\n    \n// Example (numerical sort):\n\n    \n//   test12 test2 test1 =\n test1 test2 test12\n\n    \nnumeric_sort\n:\n \nfalse\n,\n\n\n\n\n\n\nYou can also sort tabs on every file open and save by enabling \nsort_on_load_save\n and specifying your desired sort plugin.\n\n\n    \n// Sort tabs when a file is opened or saved\n\n    \nsort_on_load_save\n:\n \nfalse\n,\n\n\n\n\n\n\n    \n// Sort module to use when sorting on load and save\n\n    \n//    \nmodule\n: plugin that defines what view meta data is used to sort\n\n    \n//    \nreverse\n: (optional) sort tabs in the reverse (true|false)\n\n    \nsort_on_load_save_command\n:\n \n{\nmodule\n:\n \nTabsExtra.sort.name\n}\n\n\n\n\n\n\nCustomizing Sort Options\n\n\nYou can control which sort options appear by adding or removing entries from the \nsort_layout\n.  You can also change their orders as \nsort_layout\n is a list that preserves order.  Each entry contains three keys:\n\n\n\n\n\n\n\n\nKey\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nModule\n\n\nYes\n\n\nPath to sort module that is relative to Packages.  It is done in a python import style where \n.\n is used instead of \n/\n; also the \n.py\n extension is omitted.\n\n\n\n\n\n\ncaption\n\n\nYes\n\n\nCaption gives the name that should be displayed in menus or the quick panel for the sort method.\n\n\n\n\n\n\nreverse\n\n\nNo\n\n\nCauses the sort to be returned in reverse order.\n\n\n\n\n\n\n\n\n    \n// Define sort layout.  Each entry contains:\n\n    \n//    \nmodule\n: plugin that defines what view meta data is used to sort\n\n    \n//    \ncaption\n: menu name for entry\n\n    \n//    \nreverse\n: (optional) sort tabs in the reverse (true|false)\n\n    \nsort_layout\n:\n \n[\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.name\n,\n \ncaption\n:\n \nName\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.path\n,\n \ncaption\n:\n \nPath\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.modified\n,\n \ncaption\n:\n \nModified\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.created\n,\n \ncaption\n:\n \nCreated\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.type\n,\n \ncaption\n:\n \nExtension\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.size\n,\n \ncaption\n:\n \nSize\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.activated\n,\n \ncaption\n:\n \nLast Activated\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.syntax\n,\n \ncaption\n:\n \nSyntax\n},\n\n        \n{\nmodule\n:\n \nTabsExtra.sort.reverse\n,\n \ncaption\n:\n \nReverse Order\n}\n\n    \n],\n\n\n\n\n\n\nIf these modules do not suit your needs, you can write your own.\n\n\nWithin a sort module, there must be a run method as shown below:\n\n\n\n\ndef run(views, view_data)\n\n\n\n\nThis function takes a list of \nviews\n and an empty list to append sort data to.  The \nview_data\n is populated by the \nrun\n function with arrays of formatted info that will be used to sort the tabs.  Info with the most importance should be appended first.\n\n\nIf you are dealing with strings that have numbers, and you wish to sort them numerically, you can import the numeric helper with the following import: \nfrom\n \nTabsExtra\n \nimport\n \ntab_sort_helper\n \nas\n \ntsh\n.  Once imported you can simply run your data through \ntab_sort_helper\n: \ntsh\n.\nnumeric_sort\n(\ndirname\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n)\n.\n\n\nParameters\n:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nviews\n\n\nList of Sublime view objects.\n\n\n\n\n\n\nview_data\n\n\nAn empty list that should be populated by the function with relevant sort data.\n\n\n\n\n\n\n\n\nExample\n:\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n,\n \nbasename\n\n\nfrom\n \nTabsExtra\n \nimport\n \ntab_sort_helper\n \nas\n \ntsh\n\n\n\n\ndef\n \nrun\n(\nviews\n,\n \nview_data\n):\n\n    \nfor\n \nv\n \nin\n \nviews\n:\n\n        \nview_data\n.\nappend\n(\n\n            \n(\n\n                \ntsh\n.\nnumeric_sort\n(\ndirname\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n)\n.\nlower\n()),\n\n                \ntsh\n.\nnumeric_sort\n(\nbasename\n(\nv\n.\nfile_name\n()\n \nif\n \nv\n.\nfile_name\n()\n \nelse\n \n)\n.\nlower\n()),\n\n                \nv\n\n            \n)\n\n        \n)\n\n\n\n\n\n\n\n\n\n\nAdditional Menu Helper Commands\n\n\nTabsExtra also adds a number of other miscellaneous useful commands in the tab context menu.  Many of which are already available in the quick panel.  You can control which ones show up in menu by configuring \nmenu_layout\n in the settings file; you can even control the order.\n\n\n    \n// Menu layout include or exclude, in whatever order you desire, the following options:\n\n    \n// [\nclose\n, \nsticky\n, \nopen\n, \nclone\n, \nsave\n, \ndelete\n, \nrename\n, \nreveal\n, \npath\n, \nrevert\n, \nsort\n]\n\n    \n// When done, go to Preferences-\nPackage Settings-\nTabsExtra and Install/Upgrade either\n\n    \n// the default TabsMenu or the Override Menu which overrides the \nDefault\n package\ns menu.\n\n    \nmenu_layout\n:\n \n[\nclose\n,\n \nsticky\n,\n \nopen\n,\n \nclone\n,\n \nsave\n,\n \ndelete\n,\n \nrename\n,\n \nreveal\n,\n \npath\n,\n \nrevert\n,\n \nsort\n],", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of TabsExtra.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#general-usage", 
            "text": "Using TabsExtra is very straight forward once the menu is created.  TabsExtra will update the right click context menu of tabs with various useful features.  It also overrides a couple of Sublime s commands to allow for various improvements in relation to tab closing, tab focus when closing files, and tab position when opening files.", 
            "title": "General Usage"
        }, 
        {
            "location": "/usage/#installupgrade-menu", 
            "text": "When first installing TabsExtra, you need to Install the new menu; this does not happen automatically.  Go to  Preferences- Package Settings- TabsExtra  and Install/Upgrade either the  basic  tab menu or the  override  menu. The  basic  menu s commands won t be grouped together with the built-in options because of the way Sublime Text s menus are managed.  But the  override  menu overrides the  Default  Package s tab context menu for sane, clean grouping of the commands.", 
            "title": "Install/Upgrade Menu"
        }, 
        {
            "location": "/usage/#which-commands-does-tabsextra-override-and-why", 
            "text": "TabsExtra does  not  override  close_file , but it does override the following to enhance tab closing behavior:   close_by_index : close view from tab  close : close active view from global menu  close_all : close all tabs in all groups  close_others_by_index : close other tabs in current group  close_to_right_by_index  close tabs to right in current group   This allows TabsExtra do special things like ignore certain tabs, focus a specific tab after closing tab(s), force close without prompting the user if they want to save for every unsaved tab, or even skip unsaved tabs when closing.  TabsExtra  cannot  override the tab close button.  But it should be able to predict when it is pressed, and focus the appropriate window after the close.", 
            "title": "Which Commands does TabsExtra Override and Why?"
        }, 
        {
            "location": "/usage/#new-close-options", 
            "text": "TabsExtra expands how many close options there are in the tab context menu.  It also makes them available in the quick panel as well.   Close.  Close other tabs.  Close tabs to left.  Close tabs to right.  Close all tabs.   And TabsExtra also provides variants that will force close unsaved tabs without annoying the user with a prompt for every unsaved tab.  It also provides variants to simply skip unsaved tabs.", 
            "title": "New Close Options"
        }, 
        {
            "location": "/usage/#sticky-tabs", 
            "text": "TabsExtra allows users to make a tab  sticky .  This allows the tab to not close when a bulk  close  operation is performed.  By default, after any  close  command is run, the  sticky  tab properties are forgotten.  You can make a tab s stickiness persist by enabling  persistent_sticky .       // By default TabsExtra forgets a tab s  stickiness  when \n     // any  tab close  command is issued.  You can make the tab s \n     //  Stickiness  persist by enabling the following feature. \n     persistent_sticky :   false ,   A tab s stickiness can be controlled either the context menu or the quick panel.", 
            "title": "Sticky Tabs"
        }, 
        {
            "location": "/usage/#tab-focus-after-close", 
            "text": "By default TabsExtra keeps the current active tab focused, but if the active tab gets deleted, TabsExtra will default to either the left, right, or last active tab (depending how the user has it set).       // If active window gets closed, default to (left|right|last_active) \n     fallback_focus :   right", 
            "title": "Tab Focus After Close"
        }, 
        {
            "location": "/usage/#tab-spawn-position", 
            "text": "TabsExtra can control where a new window is opened with the  spawn_view  settings option.       // Experimental: When opening a view, where should it be spawned at (none|left|active_left|active_right|right) \n     spawn_view :   none ,", 
            "title": "Tab Spawn Position"
        }, 
        {
            "location": "/usage/#tab-sort", 
            "text": "TabsExtra adds various sort options to the tab context menu and quick panel.   Sort by name.  Sort by path.  Sort by modified.  Sort by created.  Sort by file extension.  Sort by size.  Sort by last activated.  Sort by syntax.  Sort current order in reverse.   You can control how numbers are handled in strings by enabling  numeric_sort .  Numbers in strings are sorted alphabetically by default, but you can cause the strings to be sorted numerically if needed.       // When sorting, normal strings will be sorted numerically. \n     // \n     // Example (non-numerical sort): \n     //   test12 test2 test1 =  test1 test12 test2 \n     // \n     // Example (numerical sort): \n     //   test12 test2 test1 =  test1 test2 test12 \n     numeric_sort :   false ,   You can also sort tabs on every file open and save by enabling  sort_on_load_save  and specifying your desired sort plugin.       // Sort tabs when a file is opened or saved \n     sort_on_load_save :   false ,        // Sort module to use when sorting on load and save \n     //     module : plugin that defines what view meta data is used to sort \n     //     reverse : (optional) sort tabs in the reverse (true|false) \n     sort_on_load_save_command :   { module :   TabsExtra.sort.name }", 
            "title": "Tab Sort"
        }, 
        {
            "location": "/usage/#customizing-sort-options", 
            "text": "You can control which sort options appear by adding or removing entries from the  sort_layout .  You can also change their orders as  sort_layout  is a list that preserves order.  Each entry contains three keys:     Key  Required  Description      Module  Yes  Path to sort module that is relative to Packages.  It is done in a python import style where  .  is used instead of  / ; also the  .py  extension is omitted.    caption  Yes  Caption gives the name that should be displayed in menus or the quick panel for the sort method.    reverse  No  Causes the sort to be returned in reverse order.          // Define sort layout.  Each entry contains: \n     //     module : plugin that defines what view meta data is used to sort \n     //     caption : menu name for entry \n     //     reverse : (optional) sort tabs in the reverse (true|false) \n     sort_layout :   [ \n         { module :   TabsExtra.sort.name ,   caption :   Name }, \n         { module :   TabsExtra.sort.path ,   caption :   Path }, \n         { module :   TabsExtra.sort.modified ,   caption :   Modified }, \n         { module :   TabsExtra.sort.created ,   caption :   Created }, \n         { module :   TabsExtra.sort.type ,   caption :   Extension }, \n         { module :   TabsExtra.sort.size ,   caption :   Size }, \n         { module :   TabsExtra.sort.activated ,   caption :   Last Activated }, \n         { module :   TabsExtra.sort.syntax ,   caption :   Syntax }, \n         { module :   TabsExtra.sort.reverse ,   caption :   Reverse Order } \n     ],   If these modules do not suit your needs, you can write your own.  Within a sort module, there must be a run method as shown below:   def run(views, view_data)   This function takes a list of  views  and an empty list to append sort data to.  The  view_data  is populated by the  run  function with arrays of formatted info that will be used to sort the tabs.  Info with the most importance should be appended first.  If you are dealing with strings that have numbers, and you wish to sort them numerically, you can import the numeric helper with the following import:  from   TabsExtra   import   tab_sort_helper   as   tsh .  Once imported you can simply run your data through  tab_sort_helper :  tsh . numeric_sort ( dirname ( v . file_name ()   if   v . file_name ()   else   ) .  Parameters :     Parameter  Description      views  List of Sublime view objects.    view_data  An empty list that should be populated by the function with relevant sort data.     Example :  from   os.path   import   dirname ,   basename  from   TabsExtra   import   tab_sort_helper   as   tsh  def   run ( views ,   view_data ): \n     for   v   in   views : \n         view_data . append ( \n             ( \n                 tsh . numeric_sort ( dirname ( v . file_name ()   if   v . file_name ()   else   ) . lower ()), \n                 tsh . numeric_sort ( basename ( v . file_name ()   if   v . file_name ()   else   ) . lower ()), \n                 v \n             ) \n         )", 
            "title": "Customizing Sort Options"
        }, 
        {
            "location": "/usage/#additional-menu-helper-commands", 
            "text": "TabsExtra also adds a number of other miscellaneous useful commands in the tab context menu.  Many of which are already available in the quick panel.  You can control which ones show up in menu by configuring  menu_layout  in the settings file; you can even control the order.       // Menu layout include or exclude, in whatever order you desire, the following options: \n     // [ close ,  sticky ,  open ,  clone ,  save ,  delete ,  rename ,  reveal ,  path ,  revert ,  sort ] \n     // When done, go to Preferences- Package Settings- TabsExtra and Install/Upgrade either \n     // the default TabsMenu or the Override Menu which overrides the  Default  package s menu. \n     menu_layout :   [ close ,   sticky ,   open ,   clone ,   save ,   delete ,   rename ,   reveal ,   path ,   revert ,   sort ],", 
            "title": "Additional Menu Helper Commands"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8-docstrings\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8-docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8-docstrings , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8-docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nTabsExtra is released under the MIT license.\n\n\nCopyright \n 2014 - 2016 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "TabsExtra is released under the MIT license.  Copyright   2014 - 2016 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}